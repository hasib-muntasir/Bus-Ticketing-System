import gspread
import pandas as pd
import tkinter as tk
from tkinter import ttk
import datetime
from tkinter import messagebox
import os
import pdfrw

#   Saving Purchased Ticket in pdf file
def form_filler(in_path, data, out_path):
    pdf = pdfrw.PdfReader(in_path)
    for page in pdf.pages:
        annotations = page['/Annots']
        if annotations is None:
            continue

        for annotation in annotations:
            if annotation['/Subtype'] == '/Widget':
                key = annotation['/T'].to_unicode()
                if key in data:
                    # Ensure that the data[key] is a valid string
                    field_value = str(data[key])
                    pdfstr = pdfrw.objects.pdfstring.PdfString.encode(field_value)
                    annotation.update(pdfrw.PdfDict(V=pdfstr))
                    annotation.update(pdfrw.PdfDict(Ff=1))

        pdf.Root.AcroForm.update(
            pdfrw.PdfDict(NeedAppearances=pdfrw.PdfObject('true')))

    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    output_pdf_path = os.path.join(desktop_path, "purchased_ticket.pdf")

    pdfrw.PdfWriter().write(output_pdf_path, pdf)

# Seat Selection
def seat_selected(button, date, button_name, seat_selection,seat_value,fair_value,start,end):
    current_color = button.cget("bg")
    # print(date)
    if current_color == "green":
        button.config(bg="red")
        gc = gspread.service_account(filename="bus-ticket-system.json")
        sh = gc.open("Bus Ticket Database")
        sh.sheet1.append_row([date,start,end,button_name[button],"Booked"])
        seat_selection.append(button_name[button])
        seat_value["text"] = seat_selection
        fair_value["text"] = len(seat_selection)*1000

    if current_color == "red":
        button.config(bg="green")
        seat_selection.remove(button_name[button])
        seat_value["text"] = seat_selection
        fair_value["text"] = len(seat_selection) * 1000


#   Getting Unavailable seat from database
def getting_unavailable_seat(date_selected, start, end,initial_form):
    gc = gspread.service_account(filename="bus-ticket-system.json")
    sh = gc.open("Bus Ticket Database")
    df = pd.DataFrame(sh.sheet1.get_all_records())
    unavailable_seat = {}
    for n in range(len(df)):
        if df["Date"][n]== date_selected and df["Status"][n] == "Purchased" and \
                df["Start Point"][n] == start and df["End Point"][n] == end or \
                df["Date"][n]== date_selected and \
                df["Status"][n] == "Booked" and \
                df["Start Point"][n] == start and df["End Point"][n] == end:
            unavailable_seat[df["Seat Number"][n]]=""
    generate_bus(unavailable_seat=unavailable_seat,date_selected=date_selected,start=start, end=end,initial_form=initial_form)

#   Filling all details to gsheet file
def purchase_ticket(personal_details_form,checkbox,start,end,first_name_entry,last_name_entry,title_combobox,age_spinbox,email_value,seat_list,price,date):
    accepted = checkbox.get()

    if accepted == "Accepted":
        # User info
        firstname = first_name_entry.get()
        lastname = last_name_entry.get()
        email = email_value.get()
        name = f"{title_combobox.get()} {firstname} {lastname}"
        if firstname and lastname and email:
            gc = gspread.service_account(filename="bus-ticket-system.json")
            sh = gc.open("Bus Ticket Database")
            df = pd.DataFrame(sh.sheet1.get_all_records())
            # print(df)
            total_seat = ""
            for item in seat_list:
                for n in range(len(df)):
                    if df["Date"][n] == date and df["Seat Number"][n] == item:
                        # print(f"item={item},n={n}")

                        sh.sheet1.update_cell(n + 2, 5, "Purchased")
                total_seat += f"{item} "

            sh.worksheet("Sheet2").append_row([date, start, end,name,total_seat,age_spinbox.get(), email, price])
            #   creating ticket in pdf
            input_pdf = "Ticket_fillable.pdf"
            fields_to_fill = {'date': date,
                              'price': f"$ {price}",
                              'name': name,
                              'seat': total_seat,
                              'age': age_spinbox.get(),
                              'from': start,
                              'to': end}

            # Use the output_pdf_path as the destination path
            output_pdf_path = os.path.join(os.path.expanduser("~"), "Desktop", "purchased_ticket.pdf")

            form_filler(input_pdf, fields_to_fill, output_pdf_path)
            personal_details_form.destroy()

        else:
            tk.messagebox.showwarning(title="Error", message="First name,last name  and Email are required.")
    else:
        tk.messagebox.showwarning(message="You didn't accepted the term & conditions")


#   Creating Traveler details form
def personal_details(initial_form,seat_list,ticket_price,seat_form,journey_date,start,end):
    window = tk.Tk()
    window.title("Final Stage")

    seat_form.destroy()
    frame = tk.Frame(window)
    frame.pack()

    # Saving User Info
    user_info_frame = tk.LabelFrame(frame, text="User Information")
    user_info_frame.grid(row=0, column=0, padx=20, pady=10)

    first_name_label = tk.Label(user_info_frame, text="First Name")
    first_name_label.grid(row=0, column=0)
    last_name_label = tk.Label(user_info_frame, text="Last Name")
    last_name_label.grid(row=0, column=1)

    first_name_entry = tk.Entry(user_info_frame)
    last_name_entry = tk.Entry(user_info_frame)
    first_name_entry.grid(row=1, column=0)
    last_name_entry.grid(row=1, column=1)

    title_label = tk.Label(user_info_frame, text="Title")
    title_combobox = ttk.Combobox(user_info_frame, values=["", "Mr.", "Ms.", "Dr."])
    title_label.grid(row=0, column=2)
    title_combobox.grid(row=1, column=2)

    age_label = tk.Label(user_info_frame, text="Age")
    age_spinbox = tk.Spinbox(user_info_frame, from_=18, to=110)
    age_label.grid(row=2, column=0)
    age_spinbox.grid(row=3, column=0)

    seat_label = tk.Label(user_info_frame, text="Seat Selected")
    seat_label_value = tk.Label(user_info_frame, text=seat_list)
    seat_label.grid(row=4, column=0)
    seat_label_value.grid(row=5, column=0)
    price_label = tk.Label(user_info_frame, text= "Total Price")
    price_label.grid(row=4, column=1)
    price= len(seat_list)*1000
    price_value = tk.Label(user_info_frame, text=price)
    price_value.grid(row=5,column=1)
    email_label =tk.Label(user_info_frame, text="Email address")
    email_label.grid(row=2,column=1)
    email_value = tk.Entry(user_info_frame)
    email_value.grid(row=3,column=1)
    for widget in user_info_frame.winfo_children():
        widget.grid_configure(padx=10, pady=5)
    # Accept terms
    terms_frame = tk.LabelFrame(frame, text="Terms & Conditions")
    terms_frame.grid(row=2, column=0, sticky="news", padx=20, pady=10)

    accept_var = tk.StringVar(value="Not Accepted")
    terms_check = tk.Checkbutton(terms_frame, text="I accept the terms and conditions.",
                                      variable=accept_var, onvalue="Accepted", offvalue="Not Accepted")
    terms_check.grid(row=0, column=0)
    # Button
    purchase = tk.Button(frame, text="Purchase Ticket",
                         command=lambda: purchase_ticket(personal_details_form=window,checkbox=accept_var,first_name_entry=first_name_entry,
                                        last_name_entry=last_name_entry,title_combobox=title_combobox,
                                            age_spinbox=age_spinbox,email_value=email_value,seat_list=seat_list,
                                                price=price,date=journey_date,start=start,end=end))
    purchase.grid(row=3, column=0, padx=20, pady=10)

    window.mainloop()

#   Creating Bus Seat with available & Unavailable seat
def generate_bus(unavailable_seat,date_selected,start, end,initial_form):
    bus = tk.Tk()
    bus.title("Step 2 of 3")
    initial_form.destroy()

    main_frame = tk.LabelFrame(bus, text="BUS")
    main_frame.pack()
    #Left & Right Frame
    left_frame = tk.LabelFrame(main_frame,text="Bus Seat Plan")
    right_frame = tk.LabelFrame(main_frame,text="Details")
    left_frame.grid(row=0,column=0)
    right_frame.grid(row=0,column=1)
    #   Creating Frame
    top_frame = tk.LabelFrame(left_frame, text="LEGEND")
    top_frame.grid(row=0, column=0, padx=10, pady=10)
    seat_frame = tk.LabelFrame(left_frame, text="Please select your desire seat")
    seat_frame.grid(row=1, column=0, padx=10, pady=10)
    fare_detail_frame = tk.LabelFrame(right_frame, text="Ticket Fare")
    fare_detail_frame.grid(row=0, column=0, padx=10, pady=10)
    option_frame = tk.LabelFrame(right_frame)
    option_frame.grid(row=1, column=0, padx=5, pady=5)
    #   Creating Label for top_frame
    available = tk.Label(top_frame, text="Available", bg="green")
    available.grid(row=0, column=0)
    selected_label = tk.Label(top_frame, text="Selected", bg="red")
    selected_label.grid(row=0, column=2)
    purchased_label = tk.Label(top_frame, text="Purchased", bg="gray")
    purchased_label.grid(row=0, column=4)

    wheel = tk.Label(seat_frame, text="Driver", bg="gray")
    wheel.grid(row=0, column=3)

    #   Creating fare details for selected seat
    total_seat_list = []
    starting_point = tk.Label(fare_detail_frame, text="Starting Point:  ")
    starting_point_value = tk.Label(fare_detail_frame, text=f"{start}")
    ending_point = tk.Label(fare_detail_frame, text="Destination:  ")
    ending_point_value = tk.Label(fare_detail_frame, text=f"{end}")
    date_label = tk.Label(fare_detail_frame, text="Selected Journey Date:  ")
    date_value = tk.Label(fare_detail_frame,text=f"{date_selected}")
    seat_label = tk.Label(fare_detail_frame, text="Selected Seat  ")
    seat_value = tk.Label(fare_detail_frame, text= f"{total_seat_list}")
    fair_price_label = tk.Label(fare_detail_frame, text="Total Fair Price  ")
    # ticket_price = len(total_seat_selected)*1000
    fair_value= tk.Label(fare_detail_frame, text=f"{len(total_seat_list)*1000}")
    starting_point.grid(row=0,column=0)
    starting_point_value.grid(row=0,column=1)
    ending_point.grid(row=1,column=0)
    ending_point_value.grid(row=1,column=1)
    date_label.grid(row=2,column=0)
    date_value.grid(row=2,column=1)
    seat_label.grid(row=3,column=0)
    seat_value.grid(row=3,column=1)
    fair_price_label.grid(row=4,column=0)
    fair_value.grid(row=4,column=1)

    #   Creating Button for option_frame
    # change_date = tk.Button(option_frame, text="Change Selected Date")
    proceed = tk.Button(option_frame, text="Next")
    # change_date.grid(row=0, column=0, padx=30, pady=20)
    proceed.grid(row=0, column=1, padx=40, pady=20)
    #   Creating seat button for seat_frame
    buttons_label = {}
    buttons_name = {}

    rows = 10
    cols = 5
    for n in range(1, rows + 1):
        for x in range(1, cols):
            if x == 2 and n != 10:
                pass
            else:
                label = f"{chr(64 + x)}{n}"
                button = tk.Button(seat_frame, text=label, bg="green")
                button.configure(command=lambda btn=button: seat_selected(btn, date_selected, buttons_name,
                                                                          total_seat_list, seat_value,fair_value,start,end))
                if label in unavailable_seat:
                    button.configure(bg="gray", state="disabled")
                button.grid(row=n, column=x - 1)
                buttons_label[label] = button
                buttons_name[button] = label

    #   Rearranging the widget inside each frame
    for widget in top_frame.winfo_children():
        widget.grid_configure(padx=15, pady=5)
    for widget in seat_frame.winfo_children():
        widget.grid_configure(padx=10, pady=5)
    for widget in option_frame.winfo_children():
        widget.grid_configure(padx=15, pady=5)
    for widget in fare_detail_frame.winfo_children():
        widget.grid_configure(padx=15, pady=5)

    proceed.configure(command=lambda: personal_details(initial_form=initial_form,seat_list=total_seat_list, ticket_price=fair_value,seat_form=bus,journey_date=date_selected,start=start,end=end))
    # change_date.configure(command=initial_form.deiconify())
    bus.mainloop()


#   Date, Starting point & Destination Selection
def initial_selection():
    next_7_days = []
    for n in range(0,7):
        date = datetime.date.today()+datetime.timedelta(days=n)
        next_7_days.append(date.isoformat())

    #   Crating the data selection window
    journey_date = tk.Tk()
    journey_date.title("Step 1 of 3")
    journey_date.minsize(width=400, height=100)
    tk.Label(text="Please Choose your Journey Date").grid(row=2,column=0)
    selected_date = ttk.Combobox(values=next_7_days)
    tk.Label(text="Select your Starting point").grid(row=0,column=0)
    tk.Label(text="Select your Destination").grid(row=1,column=0)
    start_point = ttk.Combobox(values=["Dhaka"])
    end_point = ttk.Combobox(values=["Rangpur", "Khulna", "Rajshahi"])
    start_point.grid(row=0,column=1)
    end_point.grid(row=1,column=1)
    selected_date.grid(row=2, column=1)
    date_selection = selected_date.get()
    tk.Label().grid(row=3,column=1)
    next_button= tk.Button(text="Next",command=lambda : getting_unavailable_seat(selected_date.get(),
                                                                                 start_point.get(), end_point.get(),journey_date))
    next_button.configure(padx=10, pady=10)
    next_button.grid(row=4,column=1)

    journey_date.mainloop()

initial_selection()
